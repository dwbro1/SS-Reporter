[Actuator1]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 2
Topic: lights/kit/bar
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator2]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 3
Topic: lights/kit/counter
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator3]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 17
Topic: lights/kit/sink
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator4]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 27
Topic: lights/kit/stove
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator5]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 22
Topic: lights/kit/mirror
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator6]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 10
Topic: lights/util/main
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator7]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 9
Topic: lights/ent/main
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator8]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 11
Topic: lights/gameroom/main
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator8]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 11
Topic: lights/gameroom/main
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator9]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 7
Topic: lights/gameroom/desk
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator10]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 8
Topic: lights/pantry/main
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator11]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 25
Topic: lights/carport/door
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator12]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 24
Topic: lights/dining/main
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator13]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 23
Topic: lights/dining/accent
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Actuator14]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 18
Topic: lights/livingroom/main
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator15]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 15
Topic: lights/livingroom/accent
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state$
Toggle: False
Poll: 0

[Actuator16]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actua$
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 14
Topic: lights/livingroom/pictures
; When true set the pin to ON for half a second then turn off, otherwise switch$
Toggle: False
Poll: 0

[Logging]
File: /var/log/mqttReporter.log
MaxSize: 67108864
NumFiles: 10
Syslog: NO

[Connection1]
Class: mqttConn.mqttConnection
Name: MQTT
User = openhab
Password = Gr@ndP@$$word
Host = 192.168.1.1
Port = 1883
Keepalive = 60
; Topic to listen on, when any message is received, the current state of all
; are published to their respective topics.
Topic = sensors/getUpdate
; The MQTT broker will publish the following message on the following topic
; when the client disconnects (cleanly or crashes)
LWT-Topic = status/sensor-reporters
LWT-Msg = mqttReporter is dead
; If TLS is yes the connection will be encrypted, the Certificate is expected to be in
; ./certs/ca.crt"
TLS = NO
