[Sensor1]
; WebIOPi - Deprecated, use rpiGPIOSensor instead
Class: gpioSensor.gpioSensor
Pin: 4
; Must match one of the names in the Connection sections below
Connection: MQTT
; Topic if MQTT, openHAB Item name if REST
Destination: sensor1/topic
; Pull Up Down - UP or DOWN
PUD: UP
; Poll is in seconds, should be greater than 0.2
Poll: 0.5

[Sensor2]
; Native Raspberry Pi Library
Class: rpiGPIOSensor.rpiGPIOSensor
Pin: 7
Connection: MQTT
Destination: sensor2/topic
PUD: DOWN
Poll: 0.5

[Sensor3]
Class: bluetoothScanner.btSensor
Address: F8:F1:B6:3C:4A:FA
Destination: BluetoothItem
Connection: REST
; Needs to be greater than 1 if using the RSSI mode, 25 if using the LOOKUP mode.
Poll: 2
; Uses signal strength to detect presence of devices
Mode: RSSI
; RSSI - Maximum count for near/far readings
Max: 20
; RSSI - How many near counts before declaring device present
Near: 3
; RSSI - How many far counts before declaring device absent
Far: 15

[Sensor4]
Class: bluetoothScanner.btSensor
Address: E8:E0:A5:2B:39:E9
Connection: MQTT
Destination: sensor4/topic
Poll: 25
Mode: LOOKUP

[Sensor5]
Class: dash.dash
Connection: MQTT
; One Address/Destination pair per button, start with 1, increment numbers
; Mac address
Address1: 12:34:56:78:90:12
Destination1: actuators/bounty
Address2: 21:09:87:65:43:21
Destination2: actuators/tide
; -1 means this sensor doesn't need to use the main polling thread, it polls on
; its own
Poll: -1

[Sensor6]
Class: rokuAddr.rokuAddr
Type: Roku
Connection: MQTT
Poll: 3600000
; Name is the serial number of the device, located on the label on bottom of device and listed on the Roku website
Name1: XXXXXXXXXXXX 
Destination1: rokus/bedroom
Name2: XXXXXXXXXXXX
Destination2: rokus/den

[Sensor7]
Class: heartbeat.heartbeat
Type: Heartbeat
Connection: MQTT
Poll: 3600000
; The number of milliseconds sensorReporter has been online is published to this destination
Destination: status/heartbeat

[Actuator1]
Class: rpiGPIOActuator.rpiGPIOActuator
; The chosen connection must support a register(path, handler) method the actuators can call
; to receive specific incoming messages. See mqttConn.py for an example
; restConnection is not supported.
Connection: MQTT
Pin: 17
Topic: actuators/actuator1
; When true set the pin to ON for half a second then turn off, otherwise switch the pin from one state to the other
Toggle: True
Poll: 0

[Actuator2]
Class: execActuator.execActuator
Type: Exec
; Actuators only support MQTT at this time
; The content of messages are added as arguments to the command
; Use NA for no arguments
; Arguments that inlcude ';', '|', or '\' are ignored
Connection: MQTT
Poll: 0
; Arguments with ';', '|', and '\' will be ignored
Command: /bin/systemctl restart plexmediaserver.service
CMDTopic: scripts/restartplex
; The output string from the command is posted to the below topic.
; If the command returned a non-zero exit code, "ERROR" is published
ResultTopic: scripts/restartplex/results

[Logging]
File: /var/log/mqttReporter.log
MaxSize: 67108864
NumFiles: 10

[Connection1]
Class: mqttConn.mqttConnection
Name: MQTT
User = user
Password = password
Host = host
Port = 1883
Keepalive = 60
; Topic to listen on, when any message is received, the current state of all
; are published to their respective topics.
Topic = sensors/getUpdate
; The MQTT broker will publish the following message on the following topic 
; when the client disconnects (cleanly or crashes)
LWT-Topic = status/sensor-reporters
LWT-Msg = mqttReporter is dead
; If TLS is yes the connection will be encrypted, the Certificate is expected to be in
; ./certs/ca.crt"
TLS = NO

[Connection2]
Class: restConn.restConnection
Name: REST
URL = http://localhost:8080/rest/items/
